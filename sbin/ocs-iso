#!/bin/bash
# Author: Steven Shiau <steven _at_ clonezilla org>
# License: GPL
# Description: This program will put Debian Live minimal + DRBL/Clonezilla program into a bootable iso file.

#
DRBL_SCRIPT_PATH="${DRBL_SCRIPT_PATH:-/usr/share/drbl}"

. $DRBL_SCRIPT_PATH/sbin/drbl-conf-functions
. /etc/drbl/drbl-ocs.conf
. $DRBL_SCRIPT_PATH/sbin/ocs-functions

# other default settings
# If insert_mode=prog_only, only copy DRBL/Clonezilla programs only, no ocs images.
insert_mode="prog_and_img"
img_size_sum=0
# Default to output the result to iso file, another value is cdwriter.
output_mode="file"
# If there is any file larger then 2GB, we need to turn on -allow-limited-size option for genisoimage. Actually it can be 4GB. Anyway, here we use 2GB. (man genisoimage for more details)
iso9660_file_size_limit="2000M"   # For command "find" to find the file size (unit: Bytes)

# If we need to download Clonezilla live iso from repository as template iso, the branch and CPU arch for the file, e.g.
# http://downloads.sourceforge.net/clonezilla/$clonezilla_iso_branch/clonezilla-live-${cz_ver}${clonezilla_iso_arch_tag}.iso
# Ref to the command get-latest-ocs-live-ver
# For i686-pae in the stable branch, you can set: clonezilla_iso_branch="stable", and clonezilla_iso_arch_tag="-i686-pae"
# For Debian-based Clonezilla live, i686-pae in the stable branch, you can set: clonezilla_iso_branch="stable", and clonezilla_iso_arch_tag="-i686-pae"
# For Ubuntu-based Clonezilla live, you can set: clonezilla_iso_branch="alternative", and clonezilla_iso_arch_tag="-i386"
clonezilla_iso_branch="alternative"
clonezilla_iso_arch_tag="-i386"
# Where the MD5SUM could be found for the above iso file. This has to match $clonezilla_iso_branch and $clonezilla_iso_arch_tag
DEBIAN_ISO_ETC_PATH="http://free.nchc.org.tw/clonezilla-live/alternative/stable/"

# Excluding list for mkisofs
# We will create it like this:
# -x $DEBIAN_ISO_TMP/isolinux -x $DEBIAN_ISO_TMP/md5sum.txt -x $DEBIAN_ISO_TMP/casper/memtest 
# "home" should also be excluded since if it exists, it will conflict with the real home later we will merge. Ref: https://sourceforge.net/forum/message.php?msg_id=7599463  Thanks to Andrew Bloxom for this idea.
mkiso_exclude_list_1="isolinux syslinux md5sum.txt doc live etc pkg ocs-live.d utils"
mkiso_exclude_list_2="home"  # This should not be a duplicated count.
mkiso_exclude_list="$mkiso_exclude_list_1 $mkiso_exclude_list_2"
live_boot_menu_opt_raw=""
live_boot_menu_opt_timeout=""

#
prog="$(basename $0)"
prog_option="$*"

# functions
USAGE() {
    echo "Usage:"
    echo "To put clonezilla image into live CD:"
    echo "$prog [OPTION] CLONEZILLA_IMAGE_NAME"
    echo "OPTION:"
    language_help_prompt_by_idx_no
    echo "-a, --file-name-prefix NAME    Assign the output file name as NAME.iso. $0 will auto append '.iso' in the end of filename."
    echo "-b, --bg-mode  [text|graphic]  Assign the background of boot menu. Default is graphic"
    echo "-e, --extra-param  PARAM  Assign extra parameter PARAM for clonezilla live to run, PARAM will be appended when run in ocs-live-restore or ocs."
    echo "-f, --on-the-fly DEV  Write the output to CD/DVD writer DEV (such as /dev/hdc) instead of creating an ISO file."
    echo "-g, --ocs-live-language LANGUAGE Assign the language when using clonezilla live, available languages are en_US.UTF-8, zh_TW.UTF-8 "
    echo "-i, --assign-version-no NO  Assign the version no as NO instead of date. This only works when using with option -s."
    echo "-j, --debian-iso ISO_FILE  Assign Debian live template iso file name as ISO_FILE to be used to create Clonezilla live. By default the ISO_FILE is \"$DEBIAN_ISO_DEF\"."
    echo "-k, --ocs-live-keymap KEYBOARD_LAYOUT Assign the keyboard layout when using clonezilla live. You can find the keyboard layout in /usr/share/X11/xkb/rules/base.lst. e.g. use '-k fr' for French keyboard layout. If 'NONE' is used, the default one (US keyboard) will be use. For more info, please check the live manual on Debian Live website."
    echo "-m, --custom-ocs  PATH/custom-ocs  Use the customized ocs program 'custom-ocs' instead of the default one. Note! PATH should be assigned so that it can be found. This is advanced mode."
    echo "-n, --ocs-live-boot-menu-option EXTRA_OPTION Assign an extra option for ocs-live-boot-menu. //NOTE// Do not put '-' in this EXTRA_OPTION, $0 will add that automatically. e.g. if you want to add -s1 for ocs-live-boot-menu to run, use 's1' only."
    echo "-o, --normal-menu  When a clonezilla image is inserted, by default only restore menu will be shown in the created ISO file. If you want to show normal menu, i.e. with save and restore menu, use this one."
    echo "-p, --image-path   Assign the clonezilla image path where CLONEZILLA_IMAGE_NAME exists. Default = $ocsroot"
    echo "-r, --ocs-live-boot-menu-timeout PARAM  Set live boot menu timeout argument for ocs-live-boot-menu to PARAM."
    echo "-s, --skip-image   Do not include any clonezilla image. The is used to created a live CD with DRBL/Clonezilla programs only."
    echo "-t, --ocs-live-batch  Set clonezilla live to run in batch mode, usually it's for restoring. If this mode is set, some dialog question will be ignored."
    echo "-u, --include-dir DIR   Include a dir in the target iso file."
    echo "-x, --extra-boot-param  EXTRA_PARAM  Assign extra boot parameter EXTRA_PARAM for clonezilla live kernel to read. These parameters are the same with that from live-boot or live-config. Ex. \"noeject\" can be use to not prompt to eject the CD on reboot."
    echo "-y, --syslinux-ver VER  Assign the syslinux version as VER. E.g. 6.02, 6.03-pre1"
    echo "$prog will download a template Debian live CD for clonezilla iso file if necessary. You can also download it by yourself, and put it in the working directory when you run $prog. If you want to create that template iso file in Debian Etch, run create-debian-live."
    echo "NOTE! Due to the limitation in mkisofs, this program does not work in clonezilla image file larger than $FILE_LIMIT MB."
    echo "Ex:"
    echo "To put clonezilla image squeeze-ocs (located in /home/partimag in clonezilla server) to Live CD, you can run:"
    echo "  $prog squeeze-ocs"
    echo "To put more images, just append them, such as:"
    echo "  $prog squeeze-ocs etch-ocs"
    echo "To create a Live CD with DRBL/Clonezilla programs:"
    echo "  $prog -s"
    echo "To put clonezilla image squeeze-ocs, etch-ocs to to Live CD, and write it to cd writer /dev/hdc, you can run:"
    echo "  $prog -f /dev/hdc squeeze-ocs etch-ocs"
    echo "To create an iso file for restoring with clonezilla image squeeze-r5 builtin, and make it boot then restore the image squeeze-r5 to sda in unattended mode (Only confirmation in the beginning), you can run:"
    echo "  $prog -g en_US.UTF-8 -t -k NONE -e \"-b -c restoredisk squeeze-r5 sda\" squeeze-r5"
    echo "To create an iso file to run your own custom-ocs program:"
    echo "  $prog -g en_US.UTF-8 -k NONE -s -m ./custom-ocs"
}
#
check_file_size_in_ocs_image() {
  local img_path="$1"
  local size_t
  for ifile in $img_path/*; do
    size_t="$(du -Lms $ifile | awk -F" " '{print $1}')"
    if [ "$size_t" -gt "$FILE_LIMIT" ]; then
      [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
      echo "$ifile size ($size_t MB) is too large! $msg_mkisofs_unable_process_that"
      [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
      echo "$msg_are_u_sure_u_want_to_continue"
      echo -n "[y/N] "
      read cont_ans
      case "$cont_ans" in
        y|Y|[yY][eE][sS])
           echo $msg_ok_let_do_it
           ;;
        *)
           echo "Abort!"
           exit 2
      esac
    fi
  done
}

#
clean_tmp_dir() {
  if [ -d "$DEBIAN_ISO_TMP" -a -n "$DEBIAN_ISO_TMP" ]; then
    # Force to unmount,	although it might have been unmounted, or maybe not (ctrl-c interrupt).
    umount $DEBIAN_ISO_TMP &>/dev/null
    rmdir $DEBIAN_ISO_TMP &>/dev/null
  fi
  if [ -d "$ISOSYSLNX_TMP" -a -n "$(echo $ISOSYSLNX_TMP | grep "ocs_isosyslnx")" ]; then
    rm -rf $ISOSYSLNX_TMP
  fi
  if [ -d "$WD_TMP" -a -n "$(echo $WD_TMP | grep "ocs_iso_wd")" ]; then
    rm -rf $WD_TMP
  fi
} # End of clean_tmp_dir

#
check_if_root

# default settings:
ocs_live_batch="no"
custom_ocs=""
normal_menu_with_insert_image="no"
template_mode=""

# Parse command-line options
while [ $# -gt 0 ]; do
  case "$1" in
    -a|--file-name-prefix)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              target_iso_prefix="$1"
              shift
            fi
	    [ -z "$target_iso_prefix" ] && USAGE && exit 1
            ;;
    -l|--language)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              specified_lang="$1"
              shift
            fi
	    [ -z "$specified_lang" ] && USAGE && exit 1
            ;;
    -b|--bg-mode)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              bg_mode="$1"
              shift
            fi
	    [ -z "$bg_mode" ] && USAGE && exit 1
            ;;
    -m|--custom-ocs)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              custom_ocs="$1"
              shift
            fi
	    [ -z "$custom_ocs" ] && USAGE && exit 1
            ;;
    -e|--extra-param)
            shift
	    # extra param might begin with -, i.e. Ex. -b -p true. Therefore we should not skip this.
            ocs_live_extra_param="$1"
            shift
	    [ -z "$ocs_live_extra_param" ] && USAGE && exit 1
            ;;
    -i|--assign-version-no)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              version_no="$1"
              shift
            fi
	    [ -z "$version_no" ] && USAGE && exit 1
            ;;
    -g|--ocs-live-language)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              ocs_lang="$1"
              shift
            fi
	    [ -z "$ocs_lang" ] && USAGE && exit 1
            ;;
    -k|--ocs-live-keymap)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              ocs_live_keymap="$1"
              shift
            fi
	    [ -z "$ocs_live_keymap" ] && USAGE && exit 1
            ;;
    -p|--image-path)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              image_path="$1"
              shift
            fi
	    [ -z "$image_path" ] && USAGE && exit 1
            ;;
    -s|--skip-image)
            insert_mode="prog_only"
            shift ;;
    -t|--ocs-live-batch)
            ocs_live_batch="yes"
            shift ;;
    -o|--normal-menu)
            normal_menu_with_insert_image="yes"
            shift ;;
    -f|--on-the-fly)
            shift
	    output_mode="cdwriter"
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              output_dev="$1"
              shift
            fi
	    [ -z "$output_dev" ] && USAGE && exit 1
            ;;
    -j|--debian-iso)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              DEBIAN_ISO="$1"
	      template_mode="from-downloaded-live-media"
              shift
            fi
	    [ -z "$DEBIAN_ISO" ] && USAGE && exit 1
            ;;
    -x|--extra-boot-param)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              live_extra_boot_param="$1"
              shift
            fi
	    [ -z "$live_extra_boot_param" ] && USAGE && exit 1
            ;;
    -n|--ocs-live-boot-menu-option)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              live_boot_menu_opt_raw="$live_boot_menu_opt_raw $1"
              shift
            fi
	    [ -z "$live_boot_menu_opt_raw" ] && USAGE && exit 1
            ;;
    -r|--ocs-live-boot-menu-timeout)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              live_boot_menu_opt_timeout="$1"
              shift
            fi
	    [ -z "$live_boot_menu_opt_timeout" ] && USAGE && exit 1
            ;;
    -u|--include-dir)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              include_dir="$1"
	      include_dir_graft_point="$include_dir=$include_dir"
              shift
            fi
	    [ -z "$include_dir" ] && USAGE && exit 1
            ;;
    -y|--syslinux-ver)
            shift
            if [ -z "$(echo $1 |grep ^-.)" ]; then
              # skip the -xx option, in case 
              isolinux_ver="$1"
              shift
            fi
	    [ -z "$isolinux_ver" ] && USAGE && exit 1
            ;;
    -*)     echo "${0}: ${1}: invalid option" >&2
            USAGE >& 2
            exit 2 ;;
    *)      break ;;
  esac
done
ocs_image="$*"
# strip the / to avoid problem
ocs_image="$(echo $ocs_image | sed -e "s|/||g")"
      
[ -z "$ocs_image" -a "$insert_mode" = "prog_and_img" ] && USAGE && exit 1
[ -z "$image_path" ] && image_path=$ocsroot
[ -z "$bg_mode" ] && bg_mode="$BG_MODE_DEF"
[ -z "$DEBIAN_ISO" ] && DEBIAN_ISO="$DEBIAN_ISO_DEF"
if [ -n "$live_boot_menu_opt_raw" ]; then
   for i in $live_boot_menu_opt_raw; do
     ocs_live_boot_menu_option="$ocs_live_boot_menu_option -$i"
   done
fi
if [ -n "$live_boot_menu_opt_timeout" ]; then
   ocs_live_boot_menu_timeout_option="--timeout $live_boot_menu_opt_timeout"
fi
md5_file_url="$DEBIAN_ISO_ETC_PATH/$md5_file"

#
ask_and_load_lang_set $specified_lang

#
if ! type xorriso &>/dev/null; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "Program xorriso not found!"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_program_stop"
  exit 1
fi

if [ "$output_mode" = "cdwriter" -a type wodim &>/dev/null ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "Program wodim is not available! You have to install it."
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_program_stop"
  exit 1
fi

if [ -n "$custom_ocs" -a ! -e "$custom_ocs" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "File $custom_ocs not found!"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_program_stop"
  exit 1
fi

# Format the lang variable. This is for clonezilla live running, not for ocs-iso.
case "$ocs_lang" in 
  zh_TW.BIG5|zh_TW.big5|tw.BIG5)
   [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
   echo "For Traditional Chinese locale, Clonezilla live only supports unicode (zh_TW.UTF-8), not Big5 encoding (zh_TW.BIG5). Force to use UTF-8 for Traditional Chinese in Clonezilla live."
   [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
   ocs_lang="zh_TW.UTF-8" ;;
  zh_TW.UTF-8|zh_TW.utf8|tw.UTF-8|tw.utf8)
   ocs_lang="zh_TW.UTF-8" ;;
esac

# Decide where is the $LIVE_MEDIA
get_live_media_mnt_point &>/dev/null

# Some temp dirs
# Thanks to Orgad Shaneh. Since the temp files from Clonezilla live won't take too much space, we just use /tmp/ to store these temp files.
#if [ -w ./ ]; then
#  ISOSYSLNX_TMP="$(mktemp -d ./isolnx.XXXXXX)"
#  WD_TMP="$(mktemp -d ./iso_wd.XXXXXX)"
#else
#  ISOSYSLNX_TMP="$(mktemp -d /tmp/isolnx.XXXXXX)"
#  WD_TMP="$(mktemp -d /tmp/iso_wd.XXXXXX)"
#fi
ISOSYSLNX_TMP="$(mktemp -d /tmp/ocs_isosyslnx.XXXXXX)"
WD_TMP="$(mktemp -d /tmp/ocs_iso_wd.XXXXXX)"

#
trap clean_tmp_dir HUP INT QUIT TERM EXIT

# Try to find if it is running on live cd/usb already
if [ -z "$template_mode" ]; then
  if [ -n "$LIVE_MEDIA" ]; then
    # It's running from Clonezilla live media, use the existing resource
    template_mode="from-booting-live-media"
    [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
    echo "Found a Clonezilla live media... Will use that as a template..."
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
    check_if_in_netboot_env $LIVE_MEDIA
  else
    template_mode="from-downloaded-live-media"
    [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
    echo "No Clonezilla live media was found... Will use the downloaded template from Clonezilla repository..."
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  fi 
fi 

if [ "$template_mode" = "from-downloaded-live-media" ]; then
  if [ ! -f "$DEBIAN_ISO" ]; then
    echo "Searching for the latest Clonezilla live iso..."
    cz_ver="$(LC_ALL=C get-latest-ocs-live-ver $clonezilla_iso_branch)"
    clonezilla_iso_fname="clonezilla-live-${cz_ver}${clonezilla_iso_arch_tag}.iso"
    iso_url_for_pxe_ocs_live="http://downloads.sourceforge.net/clonezilla/$clonezilla_iso_fname"
    echo "We need Clonezilla live iso to create such a recovery cd."
    echo "Downloading the iso file from $iso_url_for_pxe_ocs_live..."
    wget $iso_url_for_pxe_ocs_live
    get_iso_rc=$?
    # validate it
    if [ "$get_iso_rc" -eq 0 ]; then
      echo -n "Validating $clonezilla_iso_fname... "
      md5_tmp="$(mktemp -d /tmp/isomd5.XXXXXX)"
      #  wget http://free.nchc.org.tw/clonezilla-live/stable/MD5SUMS
      echo -n "Downloading $md5_file_url... "
      wget $wget_opt -P "$md5_tmp" $md5_file_url
      if ! grep -w "$clonezilla_iso_fname" $md5_tmp/$md5_file | md5sum -c; then
        [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
        echo "$DEBIAN_ISO is broken! Try to remove $clonezilla_iso_fname and run this program again."
        [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
        echo "$msg_program_stop"
        exit 1
      fi
      # Rename it to the template iso file name (fixed name)
      mv -f $clonezilla_iso_fname $DEBIAN_ISO
    else
      [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
      echo "Unable to download $iso_url_for_pxe_ocs_live!"
      [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
      echo "$msg_program_stop"
      exit 1
    fi
  else
    echo "A template iso ($DEBIAN_ISO) was found!"
  fi
fi

allow_limited_size_flag=""
if [ "$insert_mode" = "prog_and_img" ]; then
  # 2 cases:
  # (1) normal_menu_with_insert_image=no, i.e. only restore menu. ocs-live-restore is the main program.
  # If it's not batch mode for clonezilla live (especially for restoring), by default we have to append "-x --restore-only", and especially before any other parameters, so that ocs-sr will run like:
  # ocs-sr -l $ocs_lang -p true -x --restore-only -b restoredisk squeeze_image
  # (2) normal_menu_with_insert_image=yes, i.e. normal menu. ocs-live-general is the main program. Therefore no extra param.
  if [ "$ocs_live_batch" = "no" ]; then
    case "$normal_menu_with_insert_image" in
      no) ocs_live_extra_param="-x --restore-only $ocs_live_extra_param" ;;
      yes) ocs_live_extra_param="" ;;
    esac
  fi

  echo "Creating clonezilla ISO with image(s) $ocs_image from $image_path..."
  # here we put ocs-live-restore as ocs-live inside live cd, and it will be shown as /$LIVE_MEDIA/ocs-live when using in running live CD.
  # use the 1st image name as iso filename
  iso_label_tag="$(echo $ocs_image | awk -F" " '{print $1}')"
  # mkisofs only allow 32 characters for volume ID
  iso_label_tag="${iso_label_tag:0:31}"
  ocs_imgs_with_abs_path=""
  for im in $ocs_image; do
    if [ ! -d "$image_path/$im" ]; then
      [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
      echo "$image_path/$im $msg_NOT_found!"
      [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
      echo "$msg_program_stop"
      exit 1
    fi
    if [ -z "$allow_limited_size_flag" ]; then
      if [ -n "$(find $image_path/$im -size +${iso9660_file_size_limit} -print)" ]; then
        allow_limited_size_flag="yes"
      fi
    fi
    # we will put all the images in $ocsroot/ inside ISO file.
    # Since we will always use /home/partimag as the image root in Clonezilla live, here the path in the created iso is /home/partimag/
    ocs_imgs_with_abs_path="$ocs_imgs_with_abs_path /home/partimag/$im/=$image_path/$im/"
    convert_ocs_format_from_1.5_to_2.0_or_newer $image_path/$im/
    check_file_size_in_ocs_image $image_path/$im/
    img_size="$(du -ms $image_path/$im/ | awk -F" " '{print $1}')" # unit: MB
    img_size_sum="$((img_size_sum+img_size))"
  done
else
  echo "Creating clonezilla Live CD ISO file..."
  # if version_no is not set, use date (Ex. 20070409)
  [ -z "$version_no" ] && version_no="$(date +%Y%m%d)"
  iso_label_tag="${version_no}"
fi
boot_menu_opt="--version-no $iso_label_tag"

if [ -n "$target_iso_prefix" ]; then
  target_iso="${target_iso_prefix}.iso"
else
  target_iso="clonezilla-live-${iso_label_tag}.iso"
fi
echo "The output file name is: $target_iso."

if [ "$template_mode" = "from-booting-live-media" ]; then
  DEBIAN_ISO_TMP="$LIVE_MEDIA"
else
  DEBIAN_ISO_TMP="$(mktemp -d /tmp/ocs-iso.XXXXXX)"
  mount -o loop,ro $DEBIAN_ISO $DEBIAN_ISO_TMP
fi

# Check if EFI boot could be supported.
# We only check bootx64.efi or bootaa64.efi since bootx86.efi is optional.
if [ -e "$DEBIAN_ISO_TMP/EFI/boot/bootx64.efi" ]; then
   cpu_arch_type="x86"
elif [ -e "$DEBIAN_ISO_TMP/EFI/boot/bootaa64.efi"  ]; then
   cpu_arch_type="arm64"
elif [ -e "$DEBIAN_ISO_TMP/EFI/boot/bootarm.efi"  ]; then
   cpu_arch_type="armhf"
else
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "/EFI/boot/bootx64.efi, /EFI/boot/bootaa64.efi or /EFI/boot/bootarm.efi was not found in template Clonezilla live!"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_program_stop"
  exit 1
fi

#
# Possible kernel/initrd paths are /casper (created by casper) or /live (created by live-initramfs)
# Find the kernel and initrd in $DEBIAN_ISO_TMP/casper or $DEBIAN_ISO_TMP/live
# Ex: $DEBIAN_ISO_TMP/casper/vmlinuz1, /$DEBIAN_ISO_TMP/casper/initrd1.img
# $live_sys_files_dir_list is from drbl-ocs.conf.
# Possible kernel/initrd paths are /casper (created by casper) or /live (created by live-initramfs)
sys_files_dir=""
for i in $live_sys_files_dir_list; do
  krnfile_full_path="$(find $DEBIAN_ISO_TMP/$i/ -maxdepth 1 -name "vmlinuz*" -print 2>/dev/null)"
  if [ -n "$krnfile_full_path" ]; then
    krnfile="$(basename $krnfile_full_path)"
    sys_files_dir="$i"
    irdfile_full_path="$(find $DEBIAN_ISO_TMP/$i/ -maxdepth 1 -name "initrd*" -print)"
    irdfile="$(basename $irdfile_full_path)"
    break
  fi
done

#
if [ -z "$sys_files_dir" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "No system files from template live iso are found!"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_program_stop"
  exit 1
fi

if [ -z "$krnfile" -o -z "$irdfile" ]; then
   [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
   echo "Kernel and initrd files NOT found in path $DEBIAN_ISO_TMP/$sys_files_dir/!"
   echo "$msg_program_stop"
   [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
   exit 1
fi

template_iso_size=0
if [ "$template_mode" = "from-booting-live-media" ]; then
  # From boot media (clonezilla live), DEBIAN_ISO_TMP is LIVE_MEDIA
  # The dirs/files in Clonezilla live (x86):
  # For arm64/armhf, only: EFI live
  # -r--r--r--  Clonezilla-Live-Version
  # -r--r--r--  GPL
  # dr-xr-xr-x  .disk/
  # dr-xr-xr-x  EFI/
  # dr-xr-xr-x  live/
  # dr-xr-xr-x  syslinux/
  # dr-xr-xr-x  utils/
  # We need all of them.
  f_dir_chklist="Clonezilla-Live-Version GPL .disk EFI $sys_files_dir syslinux utils"
  for i in $f_dir_chklist; do 
    if [ -e "$LIVE_MEDIA/$i" ]; then
       template_iso_size="$(($template_iso_size + $(du -Lmsc "$LIVE_MEDIA/$i" | tail -n 1 | awk -F" " '{print $1}')))"
    fi
  done
else
  # template_mode is "from-downloaded-live-media"
  # From iso file (debian-live-for-ocs.iso)
  # The dirs/files in Debian live for OCS (x86):
  # dr-xr-xr-x 1 root root 2.0K Nov 22 12:08 boot/
  # dr-xr-xr-x 1 root root 2.0K Nov 22 12:10 efi/
  # dr-xr-xr-x 1 root root 2.0K Nov 22 12:10 EFI/
  # -r--r--r-- 1 root root 320K Nov 22 12:10 efi.img
  # dr-xr-xr-x 1 root root 4.0K Nov 22 12:10 isolinux/
  # dr-xr-xr-x 1 root root 2.0K Nov 22 12:10 live/
  # -r--r--r-- 1 root root  36K Nov 22 12:10 md5sum.txt
  # We only need dirs: boot EFI isolinux live
  # For arm64/armhf, only: EFI live
  f_dir_chklist="boot EFI isolinux $sys_files_dir"
  for i in $f_dir_chklist; do 
    if [ -e "$DEBIAN_ISO_TMP/$i" ]; then
       template_iso_size="$(($template_iso_size + $(du -Lmsc "$DEBIAN_ISO_TMP/$i" | tail -n 1 | awk -F" " '{print $1}')))"
    fi
  done
fi
target_iso_size="$(($template_iso_size + $img_size_sum))"

#
BOOT_ITEM_DIR=$ISOSYSLNX_TMP/$sys_files_dir
[ ! -d $BOOT_ITEM_DIR ] && mkdir $BOOT_ITEM_DIR
echo -n "Copying the system files to working dir... This might take a few minutes... "
rsync -a $DEBIAN_ISO_TMP/$sys_files_dir $DEBIAN_ISO_TMP/boot $DEBIAN_ISO_TMP/.disk $ISOSYSLNX_TMP/
RC=$?
if [ "$RC" -ne 0 ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "Failed to copy system files to working dir..."
  echo "$msg_program_stop"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  exit 1
fi
echo "done!"
# Remove unnecessary files in $DEBIAN_ISO_TMP/boot/
rm -rf $ISOSYSLNX_TMP/boot/grub/{live-theme,loopback.cfg,grub.cfg,splash.png}

#
echo "Estimated target ISO file \"$target_iso\" size: $target_iso_size MB"
if [ "$target_iso_size" -gt "$FILE_LIMIT" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo "$msg_ocs_iso_too_big_for_DVD"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_are_u_sure_u_want_to_continue"
  echo -n "[y/N] "
  read cont_ans
  case "$cont_ans" in
    y|Y|[yY][eE][sS])
       echo $msg_ok_let_do_it
       ;;
    *)
       echo "Abort!"
       exit 2
  esac
elif [ "$target_iso_size" -gt "$CD_FILE_LIMIT" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo "$msg_ocs_iso_too_big_for_CD"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "$msg_are_u_sure_u_want_to_continue"
  echo -n "[y/N] "
  read cont_ans
  case "$cont_ans" in
    y|Y|[yY][eE][sS])
       echo $msg_ok_let_do_it
       ;;
    *)
       echo "Abort!"
       exit 2
  esac
fi

# output setting for clonezilla live
mkdir -p $WD_TMP/etc/ocs

# Decide ocs_live_run
# $DRBL_SCRIPT_PATH/sbin/custom-ocs is copied from $LIVE_MEDIA/pkg/custom-ocs by /etc/ocs/ocs-live.d/S03prep-drbl-clonezilla when booting
if [ -n "$custom_ocs" ]; then
    custom_ocs_opt="/pkg/custom-ocs=$custom_ocs"
    ocs_live_run="custom-ocs"
else
  if [ "$insert_mode" = "prog_and_img" ]; then
    case "$normal_menu_with_insert_image" in
      no) ocs_live_run="ocs-live-restore" ;;
      yes) ocs_live_run="ocs-live-general" ;;
    esac
  else # prog_only mode
    ocs_live_run="ocs-live-general"
  fi
fi

if [ "$cpu_arch_type" = "x86" ]; then
  # Create the iso image file
  # isolinux should be rw, so we have to copy it, and exclude the one in iso image.
  mkdir -p $ISOSYSLNX_TMP/syslinux/
  # rsync -a --exclude f*.txt --exclude boot.cat --exclude isolinux.txt --exclude isolinux.bin --exclude splash.rle --exclude doc $DRBL_SCRIPT_PATH/pkg/syslinux/* $ISOSYSLNX_TMP/isolinux/
  # we have to overwrite isolinux.bin since vesamenu.c32 should be same version with that.
  # Jan/19/2014 For both syslinux and isolinux (unified in one dir)
  syslinux_related_files="$isolinux_file $pxelinux_simple_vesamenu $pxelinux_simple_menu $pxelinux_memdisk_file $pxelinux_bg_img $ocs_logo_img_png $pxelinux_chain_file"
  # If it's in Clonezilla live environment, we have those files. Use that first so the version mismatch can be avoided.
  for i in $syslinux_related_files; do
    if [ -e "$DEBIAN_ISO_TMP/syslinux/$(basename $i)" ]; then
      cp -af "$DEBIAN_ISO_TMP/syslinux/$(basename $i)" $ISOSYSLNX_TMP/syslinux/
    else
      cp -af $i $ISOSYSLNX_TMP/syslinux/
    fi
  done
  # For Syslinux 5, new .c32 are required: ldlinux.c32, libcom32.c32, libutil.c32
  for i in $sys_pxelinux_v5p_required_c32; do
    if [ -e "$DEBIAN_ISO_TMP/syslinux/$i" ]; then
      cp -af "$DEBIAN_ISO_TMP/syslinux/$i" $ISOSYSLNX_TMP/syslinux/
    elif [ -e "$pxelinux_binsrc_dir/$i" ]; then
      # syslinux <= 5 
      cp -af $pxelinux_binsrc_dir/$i $ISOSYSLNX_TMP/syslinux/
    elif [ -e "$pxelinux_binsrc_dir/bios/$i" ]; then
      # syslinux >= 6, different path
      cp -af $pxelinux_binsrc_dir/bios/$i $ISOSYSLNX_TMP/syslinux/
    fi
  done
fi

# 2. For EFI machine
mkdir -p $ISOSYSLNX_TMP/EFI/boot/
# Copy the EFI boot files
if [ "$live_efi_boot_loader" = "grub" ]; then
  if [ -e "$DEBIAN_ISO_TMP/EFI/boot/bootia32.efi" -o -e "$DEBIAN_ISO_TMP/EFI/boot/bootx64.efi" -o \
       -e "$DEBIAN_ISO_TMP/EFI/boot/bootaa64.efi" -o -e "$DEBIAN_ISO_TMP/EFI/boot/bootarm.efi" ]; then
    cp -af $DEBIAN_ISO_TMP/EFI $ISOSYSLNX_TMP/
    cp -af $ocs_logo_grub2_img_png $ISOSYSLNX_TMP/boot/grub/
  else
    [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
    echo "Warning! Missing /EFI/boot/bootia32.efi, /EFI/boot/bootx64.efi, /EFI/boot/bootaa64.efi or /EFI/boot/bootarm.efi in the template iso!"
    echo "UEFI booting won't work!"
    [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  fi
elif [ "$live_efi_boot_loader" = "syslinux" ]; then
  # Those files are prepared in /usr/share/drbl/pkg/syslinux/efi64/ by drbl-prepare-pxelinux
  cp -af $pxelinux_binsrc_dir/efi64/syslinux.efi $ISOSYSLNX_TMP/EFI/boot/bootx64.efi 
  cp -af $pxelinux_binsrc_dir/efi64/ldlinux.e64 $ISOSYSLNX_TMP/EFI/boot/
  cp -af $pxelinux_binsrc_dir/efi64/*.c32 $ISOSYSLNX_TMP/EFI/boot/
  cp -af $ocs_logo_grub2_img_png $ISOSYSLNX_TMP/boot/grub/
fi

etherboot_zlilo="$($query_pkglist_cmd drbl-etherboot 2>/dev/null | grep -E "eb-.*-etherboot-pci.zlilo$")"
# we have to force it name as etherboot.zdsk, since isolinux only uses the "plain" ISO 9660 filenames, i.e. it does not support Rock Ridge or Joliet filenames.
# ref: http://syslinux.zytor.com/archives/2006-October/007440.html
# "-" will be regards as "_" if you want to use "-" for isolinux.
# In syslinux on vfat, etherboot.zlilo is too long, make it ever shorter as eb.zli
if [ -n "$etherboot_zlilo" ]; then
  # This is run in DRBL server
  cp -af $etherboot_zlilo $BOOT_ITEM_DIR/eb.zli
else
  # This is run in Clonezilla live with casper or live mechanism
  for i in $live_sys_files_dir_list; do
    if [ -e "$LIVE_MEDIA/$i/eb.zli" ]; then
      cp -af $LIVE_MEDIA/$i/eb.zli $BOOT_ITEM_DIR/eb.zli
      break
    fi
  done
fi
# same reason, we have to use different name in isolinux
# gPXE is deprecated, we will use iPXE. We keep this gpxe part for ref only.
gpxe_lkn="$($query_pkglist_cmd gpxe 2>/dev/null | grep -E "gpxe.lkrn$")"
if [ -n "$gpxe_lkn" ]; then
  # This is run in DRBL server
  cp -af $gpxe_lkn $BOOT_ITEM_DIR/gpxe.lkn
else
  # This is run in Clonezilla live with casper or live mechanism
  for i in $live_sys_files_dir_list; do
    if [ -e "$LIVE_MEDIA/$i/gpxe.lkn" ]; then
      cp -af $LIVE_MEDIA/$i/gpxe.lkn $BOOT_ITEM_DIR/gpxe.lkn
      break
    fi
  done
fi
# same reason, we have to use different name in isolinux
# For ipxe from Debian, there are 2 "ipxe.lkrn", and one of them is symbolic file:
# $ dpkg -c ipxe_1.0.0+git-20150424.a25a16d-1_all.deb | grep ipxe.lkrn
# -rw-r--r-- root/root    279677 2015-04-30 03:04 ./boot/ipxe.lkrn
# lrwxrwxrwx root/root         0 2015-04-30 03:04 ./usr/lib/ipxe/ipxe.lkrn -> /boot/ipxe.lkrn
# Therefore we force to use "-L" option in cp command
ipxe_lkn="$(LC_ALL=C $query_pkglist_cmd ipxe 2>/dev/null | grep -Ew "ipxe.lkrn$" | tail -n 1)"
if [ -n "$ipxe_lkn" ]; then
  # This is run in DRBL server
  cp -afL $ipxe_lkn $BOOT_ITEM_DIR/ipxe.lkn
else
  # This is run in Clonezilla live with casper or live mechanism
  for i in $live_sys_files_dir_list; do
    if [ -e "$LIVE_MEDIA/$i/ipxe.lkn" ]; then
      cp -afL $LIVE_MEDIA/$i/ipxe.lkn $BOOT_ITEM_DIR/ipxe.lkn
      break
    fi
  done
fi
# For ipxe from Debian, there are 2 "ipxe.efi", and one of them is symbolic file:
# $ dpkg -c ipxe_1.0.0+git-20150424.a25a16d-1_all.deb | grep ipxe.efi
# -rw-r--r-- root/root    754752 2015-04-30 03:04 ./boot/ipxe.efi
# lrwxrwxrwx root/root         0 2015-04-30 03:04 ./usr/lib/ipxe/ipxe.efi -> /boot/ipxe.efi
# Therefore we force to use "-L" option in cp command
ipxe_efi="$(LC_ALL=C $query_pkglist_cmd ipxe 2>/dev/null | grep -Ew "ipxe.efi$" | tail -n 1)"
if [ -n "$ipxe_efi" ]; then
  # This is run in DRBL server
  cp -afL $ipxe_efi $BOOT_ITEM_DIR/ipxe.efi
else
  # This is run in Clonezilla live with casper or live mechanism
  for i in $live_sys_files_dir_list; do
    if [ -e "$LIVE_MEDIA/$i/ipxe.efi" ]; then
      cp -afL $LIVE_MEDIA/$i/ipxe.efi $BOOT_ITEM_DIR/ipxe.efi
      break
    fi
  done
fi
# same reason, we have to use different name in isolinux
if [ -e "$fdos_img_src" ] ; then
  cp -af $fdos_img_src $BOOT_ITEM_DIR/freedos.img
else
  # This is run in Clonezilla live with casper or live mechanism
  for i in $live_sys_files_dir_list; do
    if [ -e "$LIVE_MEDIA/$i/freedos.img" ]; then
      cp -af $LIVE_MEDIA/$i/freedos.img $BOOT_ITEM_DIR/freedos.img
      break
    fi
  done
fi
# $memtest86_file (memtest86) is 9 characters, will go wrong when it's FAT (usb flash drive). We use memtest to overwrite the one comes from Debian live.
# Since live helper will put memtest in casper, we can choose to copy it or not.
# If we really want to use the memtest from drbl, we have to remove $DEBIAN_ISO_TMP/casper/memtest before doing mkisofs, otherwise it will complain like:
# Using MEMTEST000.;1 for  /tmp/ocs-iso.E15902/casper/memtest (memtest)
# genisoimage: Error: '/tmp/isolnx.V15903/casper/memtest' and '/tmp/ocs-iso.E15902/casper/memtest' have the same Rock Ridge name 'memtest'.
# Unable to sort directory /tmp/ocs-iso.E15902/casper
# since $DEBIAN_ISO_TMP/casper/memtest is read-only, we can not remove it. Later we will exclude that later by mkisofs.
if [ -e "$memtest86_file" ]; then
  cp -af $memtest86_file $BOOT_ITEM_DIR/memtest
else
  # This is run in Clonezilla live with casper or live mechanism
  for i in $live_sys_files_dir_list; do
    if [ -e "$LIVE_MEDIA/$i/memtest" ]; then
      cp -af $LIVE_MEDIA/$i/memtest $BOOT_ITEM_DIR/memtest
      break
    fi
  done
fi

# Excluding list for mkisofs
for i in $live_sys_files_dir_list; do
  if [ -e "$DEBIAN_ISO_TMP/$i/memtest" ]; then
    mkiso_exclude_list="$mkiso_exclude_list $i/memtest"
    break
  fi
done
mkiso_exclude_opt=""
for i in $mkiso_exclude_list; do
  mkiso_exclude_opt="$mkiso_exclude_opt -x $DEBIAN_ISO_TMP/$i"
done

# Find the boot param $boot_param, also $splash_opt and $quiet_opt will be gotten
if [ "$template_mode" = "from-booting-live-media" ]; then
  # From boot media (clonezilla live), DEBIAN_ISO_TMP is LIVE_MEDIA
  # Jan/19/2014 We have unified syslinux and isolinux to one dir "syslinux"
  if [ -d "$DEBIAN_ISO_TMP/syslinux/" ]; then
    get_live_boot_param $DEBIAN_ISO_TMP/syslinux/  # Got boot_param
  elif [ -d "$DEBIAN_ISO_TMP/boot/grub/" ]; then
    get_live_boot_param $DEBIAN_ISO_TMP/boot/grub/ # Got boot_param
  fi
else
  # From iso file (debian-live-for-ocs.iso)
  if [ -d "$DEBIAN_ISO_TMP/syslinux/" ]; then
    get_live_boot_param $DEBIAN_ISO_TMP/isolinux/  # Got boot_param
  elif [ -d "$DEBIAN_ISO_TMP/boot/grub/" ]; then
    get_live_boot_param $DEBIAN_ISO_TMP/boot/grub/ # Got boot_param
  fi
fi

if [ "$splash_opt" = "splash" ]; then
  splash_switch="-sp"
else
  splash_switch=""
fi
if [ "$quiet_opt" = "quiet" ]; then
  quiet_switch="-q"
else
  quiet_switch=""
fi

# Make sure no extra white space in the end of ocs_live_run and ocs_live_extra_param
# Otherwise it might cause the boot parameters to be wrongly parsed, i.e. the boot parameters:
# ocs_live_run="clonezilla -l en_US.UTF-8 -p reboot -k  " net.ifnames=0
# is wrongly parsed by Linux kernel 4.1 so that net.ifnames=0 won't take effect.
ocs_live_run="$(LC_ALL=C echo "$ocs_live_run" | sed -r -e "s/[[:space:]]*$//g")"
ocs_live_extra_param="$(LC_ALL=C echo "$ocs_live_extra_param" | sed -r -e "s/[[:space:]]*$//g")"

#
if [ -n "$ocs_image" ]; then
  # Image is included
  # For isolinux
  if [ "$cpu_arch_type" = "x86" ]; then
    # Dir syslinux only for x86 CPU arch
    ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_iso locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --title "clonezilla live with img $ocs_image" --toram-mode live -r "* Boot menu for BIOS machine" isolinux $ISOSYSLNX_TMP/syslinux/
    # For syslinux
    ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_dev locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --title "clonezilla live with img $ocs_image" --toram-mode live -r "* Boot menu for BIOS machine" syslinux $ISOSYSLNX_TMP/syslinux/
  fi
  # Dir /EFI/boot/ is for x86, arm64 or armhf CPU arch
  # For EFI, grub2 efi or syslinux efi
  if [ "$live_efi_boot_loader" = "grub" ]; then
    if [ -e "$ISOSYSLNX_TMP/EFI/boot/bootia32.efi" -o -e "$ISOSYSLNX_TMP/EFI/boot/bootx64.efi" -o \
	 -e "$ISOSYSLNX_TMP/EFI/boot/bootaa64.efi" -o -e "$ISOSYSLNX_TMP/EFI/boot/bootarm.efi" ]; then
      ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_grub2_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_iso locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --title "clonezilla live with img $ocs_image" --toram-mode live -r "* Boot menu for EFI machine" grub2-efi $ISOSYSLNX_TMP/boot/grub/
    fi
  elif [ "$live_efi_boot_loader" = "syslinux" ]; then
    ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_iso locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --title "clonezilla live with img $ocs_image" --toram-mode live -r "* Boot menu for EFI machine" syslinux $ISOSYSLNX_TMP/boot/grub/
  fi
else
  # No image is included
  # For isolinux
  if [ "$cpu_arch_type" = "x86" ]; then
    # Dir syslinux only for x86 CPU arch
    ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_iso locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --toram-mode live -r "* Boot menu for BIOS machine" isolinux $ISOSYSLNX_TMP/syslinux/
    # For syslinux
    ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_dev locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --toram-mode live -r "* Boot menu for BIOS machine" syslinux $ISOSYSLNX_TMP/syslinux/
  fi
  # Dir /EFI/boot/ is for x86, arm64 or armhf CPU arch
  # For EFI, grub2 efi or syslinux efi
  if [ "$live_efi_boot_loader" = "grub" ]; then
    if [ -e "$ISOSYSLNX_TMP/EFI/boot/bootia32.efi" -o -e "$ISOSYSLNX_TMP/EFI/boot/bootx64.efi" -o \
	 -e "$ISOSYSLNX_TMP/EFI/boot/bootaa64.efi" -o -e "$ISOSYSLNX_TMP/EFI/boot/bootarm.efi" ]; then
      ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_grub2_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_iso locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --toram-mode live -r "* Boot menu for EFI machine" grub2-efi $ISOSYSLNX_TMP/boot/grub/
    fi
  elif [ "$live_efi_boot_loader" = "syslinux" ]; then
    ocs-live-boot-menu -j -vb $splash_switch $quiet_switch $ocs_live_boot_menu_timeout_option $ocs_live_boot_menu_option -l $lang_answer -f $VGA_MODE_DEF -b $bg_mode -k /$sys_files_dir/$krnfile -i /$sys_files_dir/$irdfile -m $ocs_logo_img_png $boot_menu_opt --boot-param "$boot_param $live_extra_boot_param $supp_boot_param_ocs_live_iso locales=$ocs_lang keyboard-layouts=$ocs_live_keymap ocs_live_run=\"$ocs_live_run\" ocs_live_extra_param=\"$ocs_live_extra_param\" ocs_live_batch=\"$ocs_live_batch\"" --toram-mode live -r "* Boot menu for EFI machine" syslinux $ISOSYSLNX_TMP/boot/grub/
  fi
fi

#
echo "Preparing syslinux, syslinux.exe, makeboot.sh, and makeboot.bat in dir utils... "
# If it's in Clonezilla live environment, we have those files
if [ -e "$LIVE_MEDIA/utils/linux/x64/syslinux" -a \
     -e "$LIVE_MEDIA/utils/linux/x86/syslinux" -a \
     -e "$LIVE_MEDIA/utils/mbr/mbr.bin" -a \
     -e "$LIVE_MEDIA/utils/win64/syslinux64.exe" -a \
     -e "$LIVE_MEDIA/utils/win32/syslinux.exe" ]; then
  cp -rf $LIVE_MEDIA/utils $ISOSYSLNX_TMP
  if [ -d "$LIVE_MEDIA/syslinux" ]; then
    # Since syslinux (for GNU/Linux) and syslinux*.exe are copied, to make the version consistent,
    # the other related files should be copied, too.
    cp -af $LIVE_MEDIA/syslinux/{*.c32,*.bin,memdisk} $ISOSYSLNX_TMP/syslinux/
  fi
else
  if [ -z "$isolinux_ver" ]; then
    isolinux_ver="$(LC_ALL=C strings $ISOSYSLNX_TMP/syslinux/isolinux.bin 2>/dev/null | grep "^ISOLINUX" | awk -F" " '{print $2}')"
  fi
  if [ -n "$isolinux_ver" ]; then
    put_syslinux_makeboot_for_usb_flash $ISOSYSLNX_TMP $isolinux_ver
  fi
fi
if [ -d "$ISOSYSLNX_TMP/utils" ]; then
  utils_files_dir_graft_point="/utils/=$ISOSYSLNX_TMP/utils/"
fi

# put version tag
# The content is like clonezilla-live-20070308
echo "clonezilla-live-${iso_label_tag}" > $ISOSYSLNX_TMP/Clonezilla-Live-Version
echo "This Clonezilla live iso file was created by this command:" >> $ISOSYSLNX_TMP/Clonezilla-Live-Version
echo "$prog $prog_option" >> $ISOSYSLNX_TMP/Clonezilla-Live-Version
if [ ! -e $ISOSYSLNX_TMP/$sys_files_dir/Clonezilla-Live-Version ]; then
  # Copy another one in the live dir. It will be used for toram=live mode.
  cp -a $ISOSYSLNX_TMP/Clonezilla-Live-Version $ISOSYSLNX_TMP/$sys_files_dir/
fi
create_cpu_arch_tag_in_live $ISOSYSLNX_TMP Clonezilla
# E.g., $ISOSYSLNX_TMP/amd64-release.txt will be put.
doc_insert_in_root=""
for i in $ISOSYSLNX_TMP/*-release.txt; do
  f_bname="$(basename $i)"
  doc_insert_in_root="$doc_insert_in_root /${f_bname}=$ISOSYSLNX_TMP/${f_bname}"
done

if [ "$cpu_arch_type" = "x86" ]; then
  # $sys_files_dir maybe /casper, /live or /isolinux. If it is isolinux, we can not list them twice otherwise mkisofs will go wrong.
  if [ "$sys_files_dir" != "isolinux" ]; then
    sys_files_dir_graft_point="/syslinux/=$ISOSYSLNX_TMP/syslinux/ /$sys_files_dir/=$ISOSYSLNX_TMP/$sys_files_dir/"
  else
    sys_files_dir_graft_point="/syslinux/=$ISOSYSLNX_TMP/syslinux/" 
  fi
elif [ "$cpu_arch_type" = "arm64" -o "$cpu_arch_type" = "armhf" ]; then
  # $sys_files_dir maybe /live.
    sys_files_dir_graft_point="/$sys_files_dir/=$ISOSYSLNX_TMP/$sys_files_dir/"
fi

#
if [ -d "$ISOSYSLNX_TMP/EFI" ]; then
  sys_files_dir_graft_point="$sys_files_dir_graft_point /EFI/=$ISOSYSLNX_TMP/EFI"
fi

# If template_mode="from-booting-live-media", then there is /GPL and /Clonezilla-Live-Version, then we should not assign that.
if [ -e "$DEBIAN_ISO_TMP/GPL" ]; then
  doc_insert_in_root="$doc_insert_in_root /GPL=$DEBIAN_ISO_TMP/GPL" 
else
  doc_insert_in_root="$doc_insert_in_root /GPL=$DRBL_SCRIPT_PATH/doc/GPL" 
fi
if [ -e "$DEBIAN_ISO_TMP/Clonezilla-Live-Version" ]; then
  doc_insert_in_root="$doc_insert_in_root /Clonezilla-Live-Version=$DEBIAN_ISO_TMP/Clonezilla-Live-Version"
else
  doc_insert_in_root="$doc_insert_in_root /Clonezilla-Live-Version=$ISOSYSLNX_TMP/Clonezilla-Live-Version"
fi

# 
allow_limited_size_opt=""
if [ "$allow_limited_size_flag" = "yes" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo "Since there is at least one file larger than ${iso9660_file_size_limit}B in the image file, we turn on the option -allow-limited-size for genisoimage. This also implies enabling UDF format instead of iso9660."
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  allow_limited_size_opt="-allow-limited-size"
fi

# Remove the existing iso
[ -e "$target_iso" ] && rm -f $target_iso

#
efi_img_graft_opt="/.disk/=$ISOSYSLNX_TMP/.disk /boot/=$ISOSYSLNX_TMP/boot/ "

# Prepare the sort file and options for xorriso.
xorriso_syslinux_related_opt=""
if [ -d "$ISOSYSLNX_TMP/syslinux/" -o -d "$ISOSYSLNX_TMP/isolinux/" ]; then
  gen_iso_sort_file $ISOSYSLNX_TMP/syslinux/iso_sort.txt
  # These options only exist for syslinux/isolinux
  xorriso_syslinux_related_opt="-b syslinux/isolinux.bin -c syslinux/boot.cat -sort $ISOSYSLNX_TMP/syslinux/iso_sort.txt"
fi

# Make iso file
xorriso \
 -as mkisofs -R -r -J -joliet-long -l -cache-inodes -iso-level 3 \
 -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -partition_offset 16 \
 -A "Clonezilla live CD" \
 -publisher "DRBL/Clonezilla https://drbl.org https://clonezilla.org" \
 -V "$iso_label_tag" \
 $xorriso_syslinux_related_opt \
 -no-emul-boot -boot-load-size 4 -boot-info-table \
 -eltorito-alt-boot --efi-boot boot/grub/efi.img \
 -isohybrid-gpt-basdat -isohybrid-apm-hfsplus \
 $mkiso_exclude_opt \
 -graft-points \
  $sys_files_dir_graft_point \
  $utils_files_dir_graft_point \
  $doc_insert_in_root \
  $ocs_imgs_with_abs_path \
  $efi_img_graft_opt \
  $custom_ocs_opt \
  $include_dir_graft_point \
  | \
  (
   case "$output_mode" in
    "cdwriter")
       wodim dev=$output_dev -data -eject -v -
       ;;
    *)
       # use /dev/stdout as the bridge
       cat - > $target_iso
       ;;
   esac
  )

rc=$?
if [ "$rc" -gt 0 ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "Failed to create the iso file, or write the CD media!"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  clean_tmp_dir
  [ -n "$target_iso" -a -f "$target_iso" ] && rm -fv $target_iso
  echo "$msg_program_stop"
  exit 1
fi

# unmount all iso file
umount $DEBIAN_ISO_TMP &>/dev/null

# Clean the tmp working directory
echo "Cleaning tmp dirs..."
clean_tmp_dir

# 
if [ -e "$target_iso" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo "$msg_burn_clonezilla_img_iso: $target_iso"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
fi

exit 0
