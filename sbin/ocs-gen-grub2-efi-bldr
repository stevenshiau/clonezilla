#!/bin/bash
# Author: Steven Shiau <steven _at_ clonezilla org>
# License: GPL
# Program to create the EFI boot loader from grub2
# Three arch:
# i686, x86_64, aarch64 (Got from command "uname -m")

# Settings
# Load DRBL setting and functions
DRBL_SCRIPT_PATH="${DRBL_SCRIPT_PATH:-/usr/share/drbl}"

. $DRBL_SCRIPT_PATH/sbin/drbl-conf-functions

efi_required_mod="part_gpt part_msdos normal chain boot configfile linux appleldr minicmd multiboot iso9660 acpi efi_gop efi_uga elf loadbios loopback video_fb usb search $GRUB_FS_MOD_drbl_ocs fixvideo png gfxterm gfxterm_background gfxterm_menu echo videotest video reboot halt gfxmenu gettext serial progress test sleep tr play memdisk fat efinet tftp net"
grub_required_files="/usr/share/grub/unicode.pf2"

# Functions
USAGE() {
  echo "To create an EFI boot loader from grub2."
  echo "Usage: $ocs OUTPUT_DIR"
  echo "OUTPUT_DIR is the where the created boot loader will be placed."
  echo "   E.g.  $ocs /tmp/efi/"
} # end of USAGE
#
#############
###  MAIN ###
#############
#
ocs=`basename $0`
check_if_root

#
while [ $# -gt 0 ]; do
 case "$1" in
   -*)     echo "${0}: ${1}: invalid option" >&2
           USAGE >& 2
           exit 2 ;;
   *)      break ;;
 esac
done

output_dir="$1"

# Checking
if [ ! -e /etc/debian_version ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "This is not a Debian/Ubuntu Linux system. This program only works on Debian/Ubuntu Linux system."
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "Program terminated!"
  exit 1
fi
if [ -z "$output_dir" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "No output dir! Program terminated!"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  USAGE
  exit 1
fi
if [ ! -d "$output_dir" ]; then
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo "The output dir \"$output_dir\" does not exist, or it's not a directory."
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo "Program terminated!"
  exit 1
fi

# Check the CPU arch
case "$(LC_ALL=C uname -m)" in
  i686|x86_64) grub_arch_common="i386"
	       grub_arch_all="i386 x86_64"
	       grub_debs="grub-efi-ia32 grub-efi-ia32-bin grub-efi-amd64 grub-efi-amd64-bin"
	       ;;
  aarch64)     grub_arch_common="arm64"
	       grub_arch_all="arm64"
	       grub_debs="grub-efi-arm64 grub-efi-arm64-bin"
	       ;;
  arm*)        grub_arch_common="arm"
	       grub_arch_all="armhf"
	       grub_debs="grub-efi-arm grub-efi-arm-bin"
	       ;;
esac

#
grub_efi_dir="$(mktemp -d /tmp/grub-efi.XXXXXX)"
# Clean stale grub*.deb
rm -fv /var/cache/apt/archives/grub-*.deb
for i in $grub_debs; do
  echo "Download $i from deb packages repository..."
  LC_ALL=C apt-get -d --reinstall -y install $i
done
for i in /var/cache/apt/archives/grub-efi*.deb; do
  dpkg --extract $i $grub_efi_dir
done
# Prepare a grub.cfg so that the eltorito image could find it.
cat <<-GRUB_END > $grub_efi_dir/grub_head.cfg
search --file --set=root /.disk/info
set prefix=(\$root)/boot/grub/

GRUB_END

# Check if xz compression is supported by grub-mkimage. If yes, use it. The prompt should look like:
# -C, --compression=(xz|none|auto)  choose the compression to use
grub_mkimg_compress_opt=""
if [ -n "$(LC_ALL=C grub-mkimage --help 2>&1 | grep -Ew -- "-C" | grep -iw xz)" ]; then
  # Even if grub-mkimage --help shows "-C xz" support, it still be possible that it actually lacks XZ support.
  # Ref: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692246
  # Therefore we test here. When #692246 is fixed, we can remove this testing.
  if LC_ALL=C grub-mkimage -C xz -O ${grub_arch_common}-efi --prefix=/boot/grub/ -o /dev/null &>/dev/null; then
    grub_mkimg_compress_opt="-C xz"
  fi
fi
#
for i in $grub_arch_all; do
  export EFI_ARCH=$i
  case "$EFI_ARCH" in
    i386)   out_f="$output_dir/bootia32.efi" ;;
    x86_64) out_f="$output_dir/bootx64.efi" ;;
    arm64)  out_f="$output_dir/bootaa64.efi" ;;
    armhf)  out_f="$output_dir/bootarm.efi" ;;
  esac
  # Checking the required modules
  for im in $efi_required_mod; do
    if [ ! -e "$grub_efi_dir/usr/lib/grub/${EFI_ARCH}-efi/${im}.mod" ]; then
      [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
      echo "Missing grub2 module ${im}.mod... Excluding ${im}.mod..."
      [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
      efi_required_mod="$(echo $efi_required_mod | sed -r -e "s/$im //g")"
    fi
  done
  grub-mkimage $grub_mkimg_compress_opt -O ${EFI_ARCH}-efi -d $grub_efi_dir/usr/lib/grub/${EFI_ARCH}-efi/ -o $out_f --prefix=/boot/grub/ -c $grub_efi_dir/grub_head.cfg $efi_required_mod
  rc=$?
  if [ "$rc" -gt 0 ]; then
    # When grub-mkimage fails, an empty output file will still be created. We'd better to clean it.
    rm -f $out_f
  fi
done
# Copy the required files, e.g. fonts to the output dir.
cp -a $grub_required_files $output_dir

# Clean the temp dir
if [ -e "$grub_efi_dir" -a -n "$(echo $grub_efi_dir | grep -E "grub-efi")" ]; then
  rm -rf $grub_efi_dir
fi
